generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  SUPERADMIN
  ADMIN
  STUDENT
}

enum GameType {
  MCQ
  MATCH
}

model User {
  id               String             @id @default(cuid())
  email            String             @unique
  password         String
  type             UserType           @default(STUDENT)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  refresh_tokens   RefreshToken[]
  LessonCompletion LessonCompletion[]
  LessonAttempt    LessonAttempt[]
  ModuleAttempt    ModuleAttempt[]
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime @default(now())
  userId    String

  user User @relation(fields: [userId], references: [id])
}

model Chapter {
  id          String   @id @default(cuid())
  title       String
  description String
  order       Int
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lessons     Lesson[]
}

model Lesson {
  id               String             @id @default(cuid())
  title            String
  description      String
  chapterId        String
  order            Int
  isPublished      Boolean
  gameType         GameType           @default(MCQ)
  updatedAt        DateTime           @updatedAt
  createdAt        DateTime           @default(now())
  chapter          Chapter            @relation(fields: [chapterId], references: [id])
  modules          GameModule[]
  lessonCompletion LessonCompletion[]
  lessonAttempt    LessonAttempt[]
}

model GameModule {
  id        String   @id @default(cuid())
  lessonId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lesson        Lesson          @relation(fields: [lessonId], references: [id])
  mcq           McqModule?
  match         MatchModule?
  moduleAttempt ModuleAttempt[]
}

model McqModule {
  id           String     @id @default(cuid())
  question     String
  choices      Json
  gameModuleId String     @unique
  gameModule   GameModule @relation(fields: [gameModuleId], references: [id])
}

model MatchModule {
  id           String     @id @default(cuid())
  instruction  String
  matches      Json
  gameModuleId String     @unique
  gameModule   GameModule @relation(fields: [gameModuleId], references: [id])
}

model LessonCompletion {
  id          String   @id @default(cuid())
  userId      String
  lessonId    String
  score       Float
  completedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  lesson Lesson @relation(fields: [lessonId], references: [id])

  @@unique([userId, lessonId])
}

model LessonAttempt {
  id         String    @id @default(cuid())
  userId     String
  lessonId   String
  startedAt  DateTime  @default(now())
  finishedAt DateTime?

  user           User            @relation(fields: [userId], references: [id])
  lesson         Lesson          @relation(fields: [lessonId], references: [id])
  moduleAttempts ModuleAttempt[]
}

model ModuleAttempt {
  id              String   @id @default(cuid())
  userId          String
  gameModuleId    String
  lessonAttemptId String
  isCorrect       Boolean
  answeredAt      DateTime @default(now())

  user          User          @relation(fields: [userId], references: [id])
  gameModule    GameModule    @relation(fields: [gameModuleId], references: [id])
  lessonAttempt LessonAttempt @relation(fields: [lessonAttemptId], references: [id])
}
