generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  SUPERADMIN
  ADMIN
  STUDENT
}

model User {
  id             String         @id @default(cuid())
  email          String         @unique
  password       String
  type           UserType       @default(STUDENT)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  refresh_tokens RefreshToken[]
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime @default(now())
  userId    String

  user User @relation(fields: [userId], references: [id])
}

model Chapter {
  id          String   @id @default(cuid())
  title       String
  description String
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lessons     Lesson[]
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  description String
  chapterId   String
  order       Int
  isPublished Boolean
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
  chapter     Chapter  @relation(fields: [chapterId], references: [id])
  Game        Game[]
}

model Game {
  id          String   @id @default(cuid())
  type        GameType
  rules       Json
  questions   Json
  lessonId    String   @map("lesson_id")
  order       Int
  isPublished Boolean
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@map("games")
}

enum GameType {
  QCM             @map("qcm")
  PHRASES_A_TROUS @map("phrases_a_trous")
  MATCH_THE_WORD  @map("match_the_word")
  TRUE_OR_FALSE   @map("true_or_false")
  GAUGE           @map("gauge")
  CHOOSE_AN_ORDER @map("choose_an_order")
}
