name: CI

on:
  pull_request:
  push:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          filter: tree:0
          fetch-depth: 0
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'
      - name: Lint Project
        run: |
          pnpm install --frozen-lockfile
          pnpx prisma generate
          pnpm run lint

  build:
    runs-on: ubuntu-latest
    needs: [ lint ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          filter: tree:0
          fetch-depth: 0
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'
      - name: Build Project
        run: |
          pnpm install --frozen-lockfile
          pnpx prisma generate
          pnpm run build

  unit-test:
    runs-on: ubuntu-latest
    needs: [ build ]
    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5
    env:
      DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/test_db?schema=public'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          filter: tree:0
          fetch-depth: 0
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'
      - name: Run Unit Tests
        run: |
          pnpm install --frozen-lockfile
          pnpx prisma migrate deploy
          pnpx prisma generate
          pnpm run test

  coverage:
    permissions:
      checks: write
      pull-requests: write
      contents: write
    runs-on: ubuntu-latest
    needs: [ unit-test ]
    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5
    env:
      DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/test_db?schema=public'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          filter: tree:0
          fetch-depth: 0
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'
      - name: Run Migrations
        run: pnpx prisma migrate deploy
      - name: Run Jest Coverage
        uses: ArtiomTr/jest-coverage-report-action@v2
        with:
          package-manager: pnpm
          test-script: pnpm run test:ci

  docker-image:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [ coverage ]
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    env:
      IMAGE_NAME: ritchie-invest-api
      REGISTRY: docker.io
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          filter: tree:0
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=develop,enable=${{ github.ref == 'refs/heads/develop' }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          provenance: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          build-args: |
            NODE_VERSION=22.16.0

      - name: Image tags pushed
        run: |
          echo "Pushed tags: ${{ steps.meta.outputs.tags }}"
